package com.hs.advertise.utils;

import android.os.Build;
import android.util.Log;

import com.lunzn.systool.util.SystemUtil;
import com.lunzn.tool.log.LogUtil;
import com.lunzn.tool.util.CommonUtil;
import com.smart.localfile.LocalFileCRUDUtils;
import com.smart.net.SendCmd;
import com.smart.xml.EditorInter;
import com.smart.xml.XmlEditor;

/**
 * @author 曹林杰
 * @version [版本号]
 * @date 2017年12月8日
 * @project COM.LZ.M02.DEVICE
 * @package com.lzui.device.util
 * @filename DeviceInfoUtil.java
 */
public class DeviceInfoUtil {

    private final static String TAG = "DeviceInfoUtil";

    /**
     * 存储在xml里面的sn标记
     */
    private final static String TAG_XML_SN = "sn";

    /**
     * 存储在xml里面的gdid标记
     */
    private final static String TAG_XML_GDID = "gdid";

    /**
     * 存储在xml里面的mac标记
     */
    private final static String TAG_XML_MAC = "mac";

    /**
     * 存储在xml里面的authresult标记
     */
    private final static String TAG_XML_AUTHRESULT = "authresult";

    /**
     * 存储在xml里面的reserved标记
     */
    private final static String TAG_XML_RESERVED = "reserved";

    /**
     * rom版本号
     */
    private static String softVersion = null;

    /**
     * xml编辑器
     */
    private static XmlEditor mXmlEditor;

    /**
     * 存储数据的xml地址
     */
    private static String xmlFilePath = "/mnt/oem/Equipmentdata.xml";

    /**
     * 型号渠道
     */
    private static String channel = "LZ";

    static {

        String romid = getSoftwareVersion();
        LogUtil.i(TAG, "romid:  " + romid);
        if (romid != null) {
            // 中星微6716超脑魔盒
            if (romid.startsWith("XF-ZX6716-XFBC")) {
                channel = "XF";
                xmlFilePath = "/data/etc/Equipmentdata.xml";
            } else if (romid.startsWith("EB")) {
                // e盒
                channel = "EB";
                xmlFilePath = "/mnt/oem/Equipmentdata.xml";
            } else if (romid.startsWith("LZ-RT1")) {
                // hdmi in 型号
                channel = "HI";
                xmlFilePath = "/mnt/oem/Equipmentdata.xml";
                changePermission("/mnt/oem");
            } else if (romid.contains("INOVEL")) {
                // 艾洛维型号， mac sn 写在了一起 ：66:77:88:55:44:44,33333333
                channel = "INOVEL";
                xmlFilePath = "/data/etc/Equipmentdata.xml";
            } else {
                // 岚正盒子
                channel = "LZ";
                xmlFilePath = "/mnt/oem/Equipmentdata.xml";
                changePermission("/mnt/oem");
            }
        }
        LogUtil.i(TAG, "xmlFilePath:  " + xmlFilePath + " ;channel:" + channel);
        mXmlEditor = XmlEditor.getXmlEditor(xmlFilePath, true);
    }

    /**
     * 改变目录权限
     */
    private static void changePermission(final String path) {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                // 修改文件权限
                SendCmd.get().exec("chmod -R 777 " + path);
                SendCmd.get().oem_rwx();
            }
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * 获取型号
     *
     * @return 机型
     */
    public static String getModel() {
        getSoftwareVersion();
        String model = null;
        if (softVersion != null && softVersion.contains("-")) {
            String[] ary = softVersion.split("-");
            if (ary.length == 4) {
                model = ary[2];
            }
        }
        return model;
    }

    /**
     * 获取Rom固件版本号 ,南传规则：客户-版型-机型-软件版本
     *
     * @return 固件版本号 LZ-R1-M01-V01001，岚正规则： 品牌（对应南传客户）-芯片（版型）-型号（机型）-版本（软件版本）
     */
    public static String getSoftwareVersion() {
        if (softVersion == null) {
            try {
                softVersion = SystemUtil.getSystemProperties("ro.build.display.id", "unKnow");
//                softVersion = SystemProperties.get("ro.build.display.id", "unKnow");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        Log.i(TAG, "getSoftwareVersion:  " + softVersion);
        return softVersion;
    }

    /**
     * @return 按照一定的规则截取岚正设备的型号（机型）
     */
    private static String getLunznModelName() {
        String result = null;
        if (softVersion != null) {
            try {
                String[] ary = softVersion.split("-");
                result = ary[2];
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return result;
    }

    /**
     * 获取有线MAC地址
     *
     * @return mac地址
     */
    public static String getEthernetMac() {
        return getMacAddress();
    }

    /**
     * 获取序列号
     *
     * @return SN
     */
    public static String getSN() {
        String result = null;
        try {
            // 读取默认地址下的sn，读完之后将其写入共享区域内
            String bootSn = null;
            if ("EB".equalsIgnoreCase(channel)) {
                bootSn = Build.SERIAL;// SystemProperties.get("Build.SERIAL");
                LogUtil.i("line:205 getSn bootSn SERIAL " + bootSn);
            } else if ("HI".equalsIgnoreCase(channel)) {
                // hdmi in 有些板卡因 /tmp/factory 权限不够，不能读取到 sn.txt
                changePermission("/tmp/factory");
                LogUtil.i("getSn 修改权限 ");
                bootSn = LocalFileCRUDUtils.readFileNoNull("/tmp/factory/sn.txt");
                LogUtil.i("getSn bootSn " + bootSn);
            } else if ("INOVEL".equalsIgnoreCase(channel)) {
                // 艾洛维板卡
                changePermission("/sys/class/unifykeys/read");
                LogUtil.i("getSn 修改权限 ");
                bootSn = LocalFileCRUDUtils.readFileNoNull("/sys/class/unifykeys/read");
                LogUtil.i("getSn bootSn " + bootSn);
                bootSn = bootSn.substring(bootSn.indexOf(',') + 1);
                LogUtil.i("INOVEL  final sn " + bootSn);
            } else {
                bootSn = SystemUtil.getSystemProperties("ro.boot.serialno");
                LogUtil.i("getSn origin: " + bootSn);
                // 兼容讯飞盒子15位sn，去掉第1、8、9字符
                if ("XF".equals(channel) && CommonUtil.isNotEmpty(bootSn) && bootSn.length() == 15) {
                    char[] ary = bootSn.toCharArray();
                    StringBuilder sBuilder = new StringBuilder();
                    for (int i = 0; i < ary.length; i++) {
                        if (i != 0 && i != 7 && i != 8) {
                            sBuilder.append(ary[i]);
                        }
                    }
                    bootSn = sBuilder.toString();
                }
                LogUtil.i("line:214 getSn bootSn " + bootSn);

            }
            LogUtil.i("getSn last:  " + bootSn);
            if (CommonUtil.isNotEmpty(bootSn)) {
                // 岚正魔方的sn长度是8，讯飞超脑盒子（中星微）的sn是12
                result = bootSn;
            }

        } catch (Exception e) {
            e.printStackTrace();
            LogUtil.i("e " + e);
        }
        return result;
    }

    /**
     * 获取芯片的chipid
     */
    public static String getChipid() {
        String chipid = SystemUtil.getSystemProperties("ro.product.cpu.chipid", "unKnow");
        if ("unKnow".equals(chipid) || "".equals(chipid)) {
            chipid = null;
        }
        return chipid;
    }

    /**
     * 获取MAC地址
     *
     * @return String mac地址
     */
    private static String getMacAddress() {
        String result = null;
        LogUtil.i("getMacAddress");
        if ("INOVEL".equalsIgnoreCase(channel)) {

            // 艾洛维板卡
            changePermission("/sys/class/unifykeys/read");
            LogUtil.i("getMacAddress 修改权限 ");
            result = LocalFileCRUDUtils.readFileNoNull("/sys/class/unifykeys/read");
            LogUtil.i("getSn bootSn " + result);
            if (result != null) {
                result = result.substring(0,result.indexOf(','));
                LogUtil.i("INOVEL  final mac " + result);
            }

        } else {
            // 读取默认地址下的mac地址，读完之后将其写入共享区域内
            String mac = LocalFileCRUDUtils.readFileNoNull("/sys/class/net/eth0/address");
            String sn = getSN();
            LogUtil.i("getMacAddress sn " + sn + ", mac " + mac);
            if (sn != null) {
                result = mac;
            }
        }
        return result;
    }

    /**
     * 获取GDID
     *
     * @return GDID
     */
    public static String getGDID() {
        String gdid = getData(TAG_XML_GDID);
        LogUtil.i("getGDID:  " + gdid);
        return gdid;
    }

    /**
     * 将GDID保存至本地
     *
     * @param value gdid值
     */
    public static void setGDID(String value) {
        saveData(TAG_XML_GDID, value);
    }

    /**
     * 获取SW(客户-版型-机型)
     *
     * @return SW
     */
    public static String getSW() {
        getSoftwareVersion();
        String sw = null;
        if (softVersion != null && softVersion.contains("-")) {
            String[] ary = softVersion.split("-");
            if (ary.length == 4) {
                sw = ary[0] + ary[1] + ary[2];
            }
        }
        LogUtil.i("getSW:  " + sw);
        return sw;
    }

    /**
     * 获取IC(芯片平台)
     *
     * @return IC
     */
    public static String getIC() {
        getSoftwareVersion();
        String ic = null;
        if (softVersion != null && softVersion.contains("-")) {
            String[] ary = softVersion.split("-");
            if (ary.length == 4) {
                ic = ary[1];
            }
        }
        LogUtil.i("getIC:  " + ic);
        return ic;
    }

    /**
     * 获取OsVersion(Android版本)
     *
     * @return OsVersion
     */
    public static String getOsVersion() {
        String osVersion = android.os.Build.VERSION.RELEASE;
        LogUtil.i("getOsVersion:  " + osVersion);
        return osVersion;
    }

    /**
     * 获取厂商
     *
     * @return 厂商
     */
    public static String getBoardName() {
        getSoftwareVersion();
        String bname = null;
        if (softVersion != null && softVersion.contains("-")) {
            String[] ary = softVersion.split("-");
            if (ary.length == 4) {
                bname = ary[0];
            }
        }
        LogUtil.i("getBoardName:  " + bname);
        return bname;
    }

    /**
     * 获取保存在共享区域内的app认证结果
     *
     * @return app认证结果
     */
    public static String getApprresult() {
        String apprresult = getData(TAG_XML_AUTHRESULT);
        LogUtil.i("getApprresult:  " + apprresult);
        return apprresult;
    }

    /**
     * 保存app认证结果到共享区域内
     *
     * @param result app认证结果
     */
    public static void setApprresult(String result) {
        saveData(TAG_XML_AUTHRESULT, result);
    }

    /**
     * 获取共享区域内预留数据
     *
     * @return 预留数据
     */
    public static String getReserved() {
        String reserved = getData(TAG_XML_RESERVED);
        LogUtil.i("getReserved:  " + reserved);
        return reserved;
    }

    /**
     * 保存预留数据值共享区域内
     *
     * @param reserved 预留数据
     */
    public static void setReserved(String reserved) {
        saveData(TAG_XML_RESERVED, reserved);
    }

    /**
     * 保存key对应的value
     *
     * @param key   键值key
     * @param value 键值value
     */
    private static void saveData(String key, String value) {
        EditorInter mEditor = mXmlEditor.edit();
        mEditor.put(key, value);
        mEditor.commit();
    }

    /**
     * 获取key对应的值
     *
     * @param key 查询关键字
     * @return key对应的值
     */
    private static String getData(String key) {
        String result = mXmlEditor.getString(key);
//        // 当没有获取到数据时，重新去初始化xml，避免更新完仍然读取不到
//        if (result == null) {
//            mXmlEditor = XmlEditor.getXmlEditor(xmlFilePath);
//            result = mXmlEditor.getString(key);
//        }
        return result;
    }
}
