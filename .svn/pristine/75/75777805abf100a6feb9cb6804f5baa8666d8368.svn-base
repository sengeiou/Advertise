package com.hs.advertise.ui.activity.test;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.view.View;
import android.widget.ImageView;
import android.widget.VideoView;

import com.danikula.videocache.HttpProxyCacheServer;
import com.hs.advertise.MyApplication;
import com.hs.advertise.R;
import com.hs.advertise.business.PlayLogicUtil;
import com.hs.advertise.business.UpdateTempLog;
import com.hs.advertise.config.IntentValue;
import com.hs.advertise.model.MessageModel;
import com.hs.advertise.model.PlayLogJson;
import com.hs.advertise.mvp.model.bean.AdInfo;
import com.hs.advertise.mvp.model.bean.AdResource;
import com.hs.advertise.receiver.BroadcastAction;
import com.hs.advertise.thread.ThreadManager;
import com.hs.advertise.ui.activity.BaseActivity;
import com.hs.advertise.ui.iterfaces.IViewUpdate;
import com.hs.advertise.utils.FileUtil;
import com.hs.advertise.utils.RxjavaUtils;
import com.lunzn.tool.autofit.AutoTextView;
import com.lunzn.tool.log.LogUtil;
import com.smart.localfile.LocalFileCRUDUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Desc: 视频播放页面
 * <p>
 * Author: ganxinrong
 * PackageName: com.hs.advertise.ui.PhotoActivity
 * ProjectName: Advertise
 * Date: 2020/3/11 10:07
 */
public class VideoActivity2 extends BaseActivity implements IViewUpdate {

    private static final String TAG = "VideoActivity";
    private VideoView mVideoView;
    //视频缓存代理
    private HttpProxyCacheServer proxy;
    String[] videos = new String[]{"http://vjs.zencdn.net/v/oceans.mp4", "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"};
    //服务器请求获取到的视频URL列表
    private List<String> videoUrls = new ArrayList<>();
    private int curPosition = 0;
    private long currentTime;
    private MyBroadcastReceiver receiver;
    private boolean isTest = false;
    private String mPackName = "";
    private String[] videoRawPath;
    private AutoTextView tvSkip;
    private AutoTextView tvDetail;
    private ImageView iv_cover;
    private Bitmap lastFrameBitmap;
    private MediaMetadataRetriever mmr;

    private MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();

    @Override
    protected int getLayoutresID() {
        return R.layout.video_fragment;
    }

    @Override
    public void initData() {
        super.initData();

        //获取缓存代理
        proxy = MyApplication.getProxy(getApplication());
//        videoUrls = Arrays.asList(videos);
//        videoUrls.add("http://vfx.mtime.cn/Video/2019/03/19/mp4/190319222227698228.mp4");
//        videoUrls.add("http://v.ysbang.cn//data/video/2015/rkb/2015rkb01.mp4");
//        videoUrls.add("http://192.168.30.253:18580/ad-operation/videos/bak_video_20200323114024687.mp4");
//        videoUrls.add("http://192.168.30.253:18580/ad-operation/videos/bak_video_20200323113941711.mp4");
//        videoUrls.add("http://192.168.30.253:18580/ad-operation/videos/bak_video_20200407100540337.mp4");

        //如果是测试
        if (isTest) {
        //    final String rawPath = "android.resource://" + getPackageName() + File.separator;
//            videoRawPath = new String[]{rawPath + R.raw.ad_video2, rawPath + R.raw.ad_video3,
//                    rawPath + R.raw.ad_video4};
            String filePath = "/mnt/sdcard/raw/";
            videoRawPath = new String[]{filePath+"ad_video4.mp4", filePath + "ad_video2.mp4",
                    filePath + "ad_video3.mp4"};
            int size = mAdInfo.getAdResources().size();
            videoUrls = Arrays.asList(videoRawPath);
            LogUtil.i(TAG, "videoUrls.size():" + videoUrls.size());
        }else{
            for (int i = 0; i <mAdInfo.getAdResources().size() ; i++) {
                videoUrls.add(mAdInfo.getAdResources().get(i).getUrl());
            }
        }
        curPosition = -1;
    }

    @Override
    protected void initListener() {
        mVideoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
            @Override
            public boolean onError(MediaPlayer mp, int what, int extra) {
                LogUtil.i(TAG, "\t>>视频播放出错<<");
                LogUtil.i(TAG, "\t>>写播放日志<<");
                writeTotal();
                playVideo();
                return true;
            }
        });
        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mPlayer) {

                LogUtil.i(TAG, "\t>>视频播放完成<<");
                LogUtil.i(TAG, "\t>>写播放日志<<");
                int currentPosition = mVideoView.getCurrentPosition(); //in millisecond
                writeTotal();
                playVideo(); //监听视频一的播放完成事件，播放完毕就播放视频二,递归
            }
        });

        mVideoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            @Override
            public void onPrepared(MediaPlayer mp) {
                LogUtil.i(TAG, "视频初始化时的进度："+mp.getCurrentPosition());
               // iv_cover.setVisibility(View.GONE);
            }
        });
        // 设置播放信息监听
        mVideoView.setOnInfoListener(new MediaPlayer.OnInfoListener() {
            @Override
            public boolean onInfo(MediaPlayer mp, int what, int extra) {

                // 视频帧开始渲染时设置背景透明
                if (what == MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START) {
                    LogUtil.i(TAG, "onInfo");
                    mVideoView.setBackgroundColor(Color.TRANSPARENT);
                }
                return true;
            }
        });
    }

    @Override
    protected void initView() {
        tvDetail = (AutoTextView) findViewById(R.id.tv_detail);
        tvSkip = (AutoTextView) findViewById(R.id.tv_skip);
        mVideoView = (VideoView) findViewById(R.id.videoView);
        iv_cover = (ImageView) findViewById(R.id.iv_cover);
        tvDetail.setAlpha((float) 0.5);
        tvSkip.setAlpha((float) 0.5);
        tvDetail.setTextSize(14);
        tvSkip.setTextSize(14);

    }


    @Override
    protected void onResume() {
        super.onResume();
        LogUtil.i(TAG, " onResume mCurrenTotalTime：" + mCurrenTotalTime);
        LogUtil.i(TAG, "文件路径：" + MessageModel.JSON_LOCAL_PATH);
        playVideo();
    }

    @Override
    protected void initReceiver() {
        // 初始化广播过滤，监听服务器数据更新
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(BroadcastAction.ACTION_UPDATE_ADVER);
        receiver = new MyBroadcastReceiver();
        registerReceiver(receiver, intentFilter);
    }


    /**
     * 播放一条视频
     */
    public void playVideo() {
        currentTime = System.currentTimeMillis();
        //开启一个间隔一分钟更新temp文件的定时任务
        UpdateTempLog.getUpdateTempLog(getApplicationContext()).start(mVideoView, currentTime);
        if (curPosition >= videoUrls.size() - 1) {
            curPosition = 0;
        } else {
            curPosition++;
        }
        String proxyUrl = proxy.getProxyUrl(videoUrls.get(curPosition));//
        LogUtil.i(TAG, "proxyUrl：" + proxyUrl);
        if (isTest) {
            // 设置背景
          //  setBackground(videoUrls.get(curPosition));
            mVideoView.setVideoPath(videoUrls.get(curPosition));

        } else {
            //为videoview设置播放路径，而不是设置播放url
            mVideoView.setVideoPath(proxyUrl);
        }
        mVideoView.start();
        writeTemp();
        if (canQuit == 0) {
            //如果不能跳过则隐藏此按钮
            tvSkip.setVisibility(View.GONE);
        } else if (canQuit == 1) {
            starSkipTime();
        }
        if (mAdPosition==IntentValue.AD_POSITION_APP){
            starTotalTime();
        }
    }
    /**
     * 设置背景
     */
    private void setBackground(String path) {
        mediaMetadataRetriever.setDataSource(path);
        Bitmap bitmap = mediaMetadataRetriever.getFrameAtTime(1);
        mVideoView.setBackground(new BitmapDrawable(null, bitmap));
    }

    private void starSkipTime() {
        //跳过是1，总的是2
        starSkipTime(this, 1);
    }

    private void starTotalTime() {
        starTotalTime(this, 2);
    }


    @Override
    public void doProgress(long number, int type) {
        if (type == 1) {
            tvSkip.setText(number + "秒后 按【返回键】可跳过此广告");
        } else if (type == 2) {
            tvDetail.setText(number + " 按【OK键】查看详情");
        }
    }

    @Override
    public void onComplete(int type) {
        if (type == 1) {
            tvSkip.setText("按【返回键】可跳过此广告");
        } else if (type == 2) {
            tvDetail.setText("按【OK键】查看详情");
        }
    }



    /**
     * 结束播放一条视频时把日志写到总的日志文件中
     */
    private void writeTotal() {
        LogUtil.i(TAG, "video writeTotal()");
        //把值赋给另外一个变量，防止currentTime被改变
        final long time = currentTime;
        ThreadManager.getShortPool().execute(new Runnable() {
            @Override
            public void run() {
                String tempPath = MessageModel.JSON_TEMP_LOCAL_PATH + "temp_" + time + ".json";
                //复制temp文件的内容到总的日志文件
                if (FileUtil.copyToTotal(mVideoView.getDuration(), tempPath)) {
                    // 删除temp文件
                    LocalFileCRUDUtils.deleteFile(tempPath);
                }

            }
        });
    }

    /**
     * 开始播放的同时把日志写入temp文件中
     */
    private void writeTemp() {
        LogUtil.i(TAG, "video writeTemp");
        if (mAdInfo != null) {
            List<AdResource> mAdResources = mAdInfo.getAdResources();
            AdResource adResource = mAdResources.get(curPosition);
            LogUtil.i(TAG, "adResource name:" + adResource.getName());
            final PlayLogJson logJson = new PlayLogJson();
            logJson.setAdPosition(mAdPosition);
            logJson.setDuration(mVideoView.getCurrentPosition());
            logJson.setResourceId(adResource.getResourceId());
            ThreadManager.getShortPool().execute(new Runnable() {
                @Override
                public void run() {
                    FileUtil.writeJsonFileOnlyLine(logJson.getJson(), MessageModel.JSON_TEMP_LOCAL_PATH + "temp_" + currentTime + ".json");
                }
            });
        }
    }


    private class MyBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action.equals(BroadcastAction.ACTION_UPDATE_ADVER)) {
                LogUtil.i(TAG, "视频源更新完毕，你只要加载播放即可");
                if (mAdPosition == IntentValue.AD_POSITION_BOOT) {
                    AdInfo mFullScreenAds = PlayLogicUtil.getFullScreenAds();
                    if (mFullScreenAds != null) {
                        mAdInfo = mFullScreenAds;
                    }
                } else if (mAdPosition == IntentValue.AD_POSITION_APP) {
                    mAdInfo = PlayLogicUtil.getAppLaunchAds(mPackName);
                }
                if (mAdInfo != null) {
                    int size = mAdInfo.getAdResources().size();
                    if (size>0){
                        videoUrls.clear();
                    }
                    for (int i = 0; i <size ; i++) {
                        videoUrls.add(mAdInfo.getAdResources().get(i).getUrl());
                    }
                    LogUtil.i(TAG, "videoUrls.size():" + videoUrls.size());
                    playVideo();
                }
            }
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        RxjavaUtils.cancel();//取消定时器
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        LogUtil.i(TAG, "onDestroy()");
        if (mVideoView != null) {
            mVideoView.stopPlayback();
        }
        if (receiver != null) {
            unregisterReceiver(receiver);
        }
        UpdateTempLog.getUpdateTempLog(getApplicationContext()).stop();
    }
}